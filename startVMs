#!/bin/bash

# This script will startup multiple VMs in a certain order
# based on the .autostart file located in /home/vkalra/bin
# You can also start startup individual VMs using the UI name
# Or you can start a group of VMs, e.g. DB|IDM|IAM

# Declare what you need
declare -a vmUUID
declare -a vmName
declare -A vmAArr
declare -A vmGrp

# How long to wait between consecutive startups
declare timeWait=60

# Default type is Headless mode
declare type=headless

usage()
{
  echo "Usage: startVMs [ALL|DB|IDM|IAM|<Name of VM> gui|headless]"
  exit 1;
}


# Process the .autostart file and place into hash
processVMString()
{
  IFS=$'\n'
  # Parse the autostart file and get the vm name and the uuid store in an array
  for line in $(grep -v "^#" /home/vkalra/bin/.autostart)
  do
    #echo "DEBUG: line is : $line"
    IFS=: vmArr=( $line )
    vmName+=(${vmArr[0]})
    vmUUID+=(${vmArr[1]})
    vmAArr+=([${vmArr[0]}]=${vmArr[1]})
    #echo "DEBUG: vm of 0 is |${vmArr[0]}| and vm of 1 is ${vmArr[1]} and vm of 2 is ${vmArr[2]}"
    if [ ${vmArr[2]} == "DB" ]
    then
      vmGrp["DB"]+=${vmArr[1]}:
    fi
    if [ ${vmArr[2]} == "IDM" ]
    then
      echo ${vmArr[1]}
      vmGrp["IDM"]+=${vmArr[1]}:
    fi
    if [ ${vmArr[2]} == "IAM" ]
    then
      vmGrp["IAM"]+=${vmArr[1]}:
    fi
  done

     echo "DEBUG: The array is:"
     for i in ${vmGrp[IDM]}
     do
     echo "The value is $i"
     done
  unset IFS
}

# Is there at least one argument?
if [ $# -eq 1 ]
then
  processVMString
elif [ $# -eq 2 ]
then
  # If there is a second argument, it must be gui or headless
  if [ "$2" = "gui" -o "$2" = "headless" ] 
  then 
    type="$2"
    processVMString
  else
    usage
    exit
  fi
else
  usage
  exit
fi

case "$1" in
'ALL') echo "Starting all VMs"
       for vm in ${vmUUID[@]}
       do
         echo "Starting $vm with $type"
         vboxmanage startvm $vm --type $type 
         sleep $timeWait 
       done
;;
'DB') echo "Starting the DB VMs ${vmGrp[DB]}"
      IFS=:
      vm=${vmGrp[DB]}
      for v in ${vm}
      do
        echo "Starting $v with $type"
        vboxmanage startvm "$v" --type $type 
        sleep $timeWait
      done
      unset IFS

;;
'IDM') echo "Starting the IDM VMs $vmGrp[IDM]"
       IFS=:
       vm=${vmGrp[IDM]}
       for v in ${vm}
       do
         echo "Starting $v with $type"
         vboxmanage startvm "$v" --type $type
         sleep $timeWait
       done
       unset IFS

;;
'IAM') echo "Starting the IDM VMs $vmGrp[IAM]"
       IFS=:
       vm=${vmGrp[IAM]}
       for v in ${vm}
       do
         echo "Starting $v with $type"
         vboxmanage startvm "$v" --type $type
         sleep $timeWait
       done
       unset IFS

;;
*) # This must be a named VM you are trying to start
   echo "Starting $1 with type $type"
   vboxmanage startvm "$1" --type $type
;;
esac
